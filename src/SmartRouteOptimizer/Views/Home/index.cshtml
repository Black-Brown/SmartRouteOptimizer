<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Optimización Last-Mile - Sistema de Entregas</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.min.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

            .header h1 {
                color: #2c3e50;
                font-size: 2rem;
                font-weight: 700;
                display: flex;
                align-items: center;
                gap: 1rem;
            }

                .header h1::before {
                    content: "🚚";
                    font-size: 2.5rem;
                }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 2rem;
            min-height: calc(100vh - 100px);
        }

        .control-panel {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            height: fit-content;
        }

        .main-content {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .optimization-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .section-title {
            color: #2c3e50;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

            .form-group label {
                display: block;
                margin-bottom: 0.5rem;
                font-weight: 500;
                color: #34495e;
            }

        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 2px solid #e0e6ed;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
        }

            .form-control:focus {
                outline: none;
                border-color: #667eea;
                background: rgba(255, 255, 255, 1);
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            }

        .btn-secondary {
            background: rgba(52, 73, 94, 0.1);
            color: #34495e;
            border: 2px solid #e0e6ed;
        }

            .btn-secondary:hover {
                background: rgba(52, 73, 94, 0.2);
                border-color: #34495e;
            }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .strategy-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .strategy-card {
            background: rgba(255, 255, 255, 0.8);
            border: 2px solid #e0e6ed;
            border-radius: 12px;
            padding: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

            .strategy-card:hover {
                border-color: #667eea;
                transform: translateY(-2px);
                box-shadow: 0 4px 20px rgba(102, 126, 234, 0.2);
            }

            .strategy-card.selected {
                border-color: #667eea;
                background: rgba(102, 126, 234, 0.1);
            }

            .strategy-card h4 {
                color: #2c3e50;
                margin-bottom: 0.5rem;
                font-size: 1.1rem;
            }

            .strategy-card p {
                color: #7f8c8d;
                font-size: 0.9rem;
                line-height: 1.4;
            }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .metric-card {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #667eea;
            transition: all 0.3s ease;
        }

            .metric-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
            }

        .metric-value {
            font-size: 2rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }

        .metric-label {
            color: #7f8c8d;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
            margin-top: 1rem;
        }

        .status-ready {
            background: rgba(39, 174, 96, 0.1);
            color: #27ae60;
            border: 1px solid rgba(39, 174, 96, 0.3);
        }

        .status-running {
            background: rgba(241, 196, 15, 0.1);
            color: #f39c12;
            border: 1px solid rgba(241, 196, 15, 0.3);
        }

        .status-complete {
            background: rgba(39, 174, 96, 0.1);
            color: #27ae60;
            border: 1px solid rgba(39, 174, 96, 0.3);
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 4px;
            overflow: hidden;
            margin: 1rem 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 4px;
            transition: width 0.3s ease;
            width: 0%;
        }

        .chart-container {
            position: relative;
            height: 300px;
            margin-top: 1rem;
        }

        .map-container {
            height: 400px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .results-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            overflow: hidden;
        }

            .results-table th,
            .results-table td {
                padding: 1rem;
                text-align: left;
                border-bottom: 1px solid #e0e6ed;
            }

            .results-table th {
                background: rgba(102, 126, 234, 0.1);
                font-weight: 600;
                color: #2c3e50;
            }

            .results-table tr:hover {
                background: rgba(102, 126, 234, 0.05);
            }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

            .notification.show {
                transform: translateX(0);
            }

            .notification.success {
                background: linear-gradient(135deg, #27ae60, #2ecc71);
            }

            .notification.error {
                background: linear-gradient(135deg, #e74c3c, #c0392b);
            }

            .notification.info {
                background: linear-gradient(135deg, #3498db, #2980b9);
            }

        media (max-width: 768px) {
            .container

        {
            grid-template-columns: 1fr;
            padding: 1rem;
        }

        .metrics-grid {
            grid-template-columns: 1fr;
        }

        .strategy-grid {
            grid-template-columns: 1fr;
        }

        }
    </style>
</head>
<body>
    <header class="header">
        <h1>Sistema de Optimización Last-Mile</h1>
    </header>

    <div class="container">
        <div class="control-panel">
            <div class="section-title">🎯 Configuración de Optimización</div>

            <div class="form-group">
                <label>Estrategia de Paralelización</label>
                <div class="strategy-grid">
                    <div class="strategy-card selected" data-strategy="ByHeuristic">
                        <h4>Por Heurística</h4>
                        <p>Cada algoritmo en hilos separados</p>
                    </div>
                    <div class="strategy-card" data-strategy="ByGeographicZone">
                        <h4>Por Zona</h4>
                        <p>División geográfica paralela</p>
                    </div>
                    <div class="strategy-card" data-strategy="ByCandidateRoutes">
                        <h4>Por Rutas</h4>
                        <p>Exploración aleatoria paralela</p>
                    </div>
                    <div class="strategy-card" data-strategy="HybridApproach">
                        <h4>Híbrido</h4>
                        <p>Combinación de estrategias</p>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="maxThreads">Número de Hilos</label>
                <input type="range" id="maxThreads" class="form-control" min="1" max="16" value="4">
                <div style="display: flex; justify-content: space-between; margin-top: 0.5rem;">
                    <span>1</span>
                    <span id="threadValue">4</span>
                    <span>16</span>
                </div>
            </div>

            <div class="form-group">
                <label for="deliveryCount">Entregas a Simular</label>
                <select id="deliveryCount" class="form-control">
                    <option value="25">25 entregas (Prueba rápida)</option>
                    <option value="50" selected>50 entregas (Balanceado)</option>
                    <option value="100">100 entregas (Carga alta)</option>
                    <option value="200">200 entregas (Estrés)</option>
                </select>
            </div>

            <div class="form-group">
                <label for="vehicleCount">Número de Vehículos</label>
                <select id="vehicleCount" class="form-control">
                    <option value="3">3 vehículos</option>
                    <option value="5" selected>5 vehículos</option>
                    <option value="8">8 vehículos</option>
                    <option value="10">10 vehículos</option>
                </select>
            </div>

            <button id="startOptimization" class="btn btn-primary" style="width: 100%; margin-top: 1rem;">
                🚀 Iniciar Optimización
            </button>

            <button id="compareStrategies" class="btn btn-secondary" style="width: 100%; margin-top: 0.5rem;">
                📊 Comparar Estrategias
            </button>

            <button id="runBenchmark" class="btn btn-secondary" style="width: 100%; margin-top: 0.5rem;">
                ⚡ Ejecutar Benchmark
            </button>

            <div id="status" class="status-indicator status-ready">
                ✅ Listo para optimizar
            </div>

            <div class="progress-bar" style="display: none;">
                <div class="progress-fill"></div>
            </div>
        </div>

        <div class="main-content">
            <div class="optimization-section">
                <div class="section-title">📊 Métricas de Rendimiento</div>
                <div class="metrics-grid">
                    <div class="metric-card">
                        <div class="metric-value" id="totalDistance">-</div>
                        <div class="metric-label">Distancia Total (km)</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="executionTime">-</div>
                        <div class="metric-label">Tiempo de Ejecución (ms)</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="successRate">-</div>
                        <div class="metric-label">Tasa de Éxito (%)</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="fuelCost">-</div>
                        <div class="metric-label">Costo Combustible ($)</div>
                    </div>
                </div>
            </div>

            <div class="optimization-section">
                <div class="section-title">📈 Análisis de Performance</div>
                <div class="chart-container">
                    <canvas id="performanceChart"></canvas>
                </div>
            </div>

            <div class="optimization-section">
                <div class="section-title">🗺️ Visualización de Rutas</div>
                <div id="routeMap" class="map-container"></div>
            </div>

            <div class="optimization-section">
                <div class="section-title">📋 Resultados Comparativos</div>
                <table class="results-table" id="resultsTable">
                    <thead>
                        <tr>
                            <th>Estrategia</th>
                            <th>Tiempo (ms)</th>
                            <th>Hilos</th>
                            <th>Speedup</th>
                            <th>Eficiencia</th>
                            <th>Distancia (km)</th>
                            <th>Éxito (%)</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="7" style="text-align: center; color: #7f8c8d;">
                                Ejecuta una optimización para ver resultados
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="notification" class="notification"></div>

    <script>
        // Variables globales
        let currentStrategy = 'ByHeuristic';
        let sessionId = null;
        let performanceChart = null;
        let routeMap = null;
        let allResults = [];

        // Inicialización
        document.addEventListener('DOMContentLoaded', function() {
            initializeControls();
            initializeChart();
            initializeMap();
            startLiveMetricsUpdate();
        });

        function initializeControls() {
            // Strategy selection
            document.querySelectorAll('.strategy-card').forEach(card => {
                card.addEventListener('click', function() {
                    document.querySelectorAll('.strategy-card').forEach(c => c.classList.remove('selected'));
                    this.classList.add('selected');
                    currentStrategy = this.dataset.strategy;
                    showNotification('Estrategia seleccionada: ' + getStrategyName(currentStrategy), 'info');
                });
            });

            // Thread count slider
            const threadSlider = document.getElementById('maxThreads');
            const threadValue = document.getElementById('threadValue');
            threadSlider.addEventListener('input', function() {
                threadValue.textContent = this.value;
            });

            // Buttons
            document.getElementById('startOptimization').addEventListener('click', startOptimization);
            document.getElementById('compareStrategies').addEventListener('click', compareStrategies);
            document.getElementById('runBenchmark').addEventListener('click', runBenchmark);
        }

        function initializeChart() {
            const ctx = document.getElementById('performanceChart').getContext('2d');
            performanceChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Tiempo de Ejecución (ms)',
                        data: [],
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        tension: 0.4,
                        fill: true
                    }, {
                        label: 'Speedup',
                        data: [],
                        borderColor: '#27ae60',
                        backgroundColor: 'rgba(39, 174, 96, 0.1)',
                        tension: 0.4,
                        fill: false,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Tiempo (ms)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Speedup'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    }
                }
            });
        }

        function initializeMap() {
            // Inicializar mapa de Leaflet centrado en Santo Domingo
            routeMap = L.map('routeMap').setView([18.4861, -69.9312], 12);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(routeMap);

            // Agregar marcador del centro de distribución
            L.marker([18.4861, -69.9312])
                .addTo(routeMap)
                .bindPopup('<b>Centro de Distribución</b><br>Santo Domingo, RD');
        }

        async function startOptimization() {
            const button = document.getElementById('startOptimization');
            const status = document.getElementById('status');
            const progressBar = document.querySelector('.progress-bar');
            const progressFill = document.querySelector('.progress-fill');

            try {
                button.disabled = true;
                button.innerHTML = '<span class="loading-spinner"></span> Optimizando...';

                status.className = 'status-indicator status-running';
                status.innerHTML = '⏳ Ejecutando optimización...';

                progressBar.style.display = 'block';
                progressFill.style.width = '0%';

                const requestData = {
                    deliveryPoints: generateSampleDeliveries(parseInt(document.getElementById('deliveryCount').value)),
                    vehicles: generateSampleVehicles(parseInt(document.getElementById('vehicleCount').value)),
                    strategy: currentStrategy,
                    maxThreads: parseInt(document.getElementById('maxThreads').value)
                };

                const response = await fetch('/api/optimization/start', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestData)
                });

                const result = await response.json();
                sessionId = result.sessionId;

                // Simular progreso
                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 10;
                    if (progress > 90) progress = 90;
                    progressFill.style.width = progress + '%';
                }, 200);

                // Monitorear estado
                const statusInterval = setInterval(async () => {
                    try {
                        const statusResponse = await fetch(`/api/optimization/status/${sessionId}`);
                        const statusData = await statusResponse.json();

                        status.innerHTML = '⏳ ' + statusData.status;

                        if (!statusData.isRunning && statusData.resultsCount > 0) {
                            clearInterval(statusInterval);
                            clearInterval(progressInterval);

                            progressFill.style.width = '100%';

                            // Mostrar resultados
                            displayResults(statusData.results[0]);

                            button.disabled = false;
                            button.innerHTML = '🚀 Iniciar Optimización';
                            status.className = 'status-indicator status-complete';
                            status.innerHTML = '✅ Optimización completada';

                            setTimeout(() => {
                                progressBar.style.display = 'none';
                            }, 1000);

                            showNotification('Optimización completada exitosamente', 'success');
                        }
                    } catch (error) {
                        console.error('Error monitoring status:', error);
                        clearInterval(statusInterval);
                        clearInterval(progressInterval);
                        handleError(error);
                    }
                }, 1000);

            } catch (error) {
                handleError(error);
                button.disabled = false;
                button.innerHTML = '🚀 Iniciar Optimización';
            }
        }

        async function compareStrategies() {
            const button = document.getElementById('compareStrategies');
            const status = document.getElementById('status');

            try {
                button.disabled = true;
                button.innerHTML = '<span class="loading-spinner"></span> Comparando...';
                status.className = 'status-indicator status-running';
                status.innerHTML = '⏳ Comparando estrategias...';

                const requestData = {
                    deliveryPoints: generateSampleDeliveries(parseInt(document.getElementById('deliveryCount').value)),
                    vehicles: generateSampleVehicles(parseInt(document.getElementById('vehicleCount').value)),
                    maxThreads: parseInt(document.getElementById('maxThreads').value)
                };

                const response = await fetch('/api/optimization/compare', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestData)
                });

                const results = await response.json();
                displayComparisonResults(results);

                button.disabled = false;
                button.innerHTML = '📊 Comparar Estrategias';
                status.className = 'status-indicator status-complete';
                status.innerHTML = '✅ Comparación completada';

                showNotification('Comparación de estrategias completada', 'success');

            } catch (error) {
                handleError(error);
                button.disabled = false;
                button.innerHTML = '📊 Comparar Estrategias';
            }
        }

        async function runBenchmark() {
            const button = document.getElementById('runBenchmark');
            const status = document.getElementById('status');

            try {
                button.disabled = true;
                button.innerHTML = '<span class="loading-spinner"></span> Benchmarking...';
                status.className = 'status-indicator status-running';
                status.innerHTML = '⏳ Ejecutando benchmark...';

                const requestData = {
                    deliveryPoints: generateSampleDeliveries(100),
                    vehicles: generateSampleVehicles(8)
                };

                const response = await fetch('/api/optimization/benchmark', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestData)
                });

                const benchmark = await response.json();
                displayBenchmarkResults(benchmark);

                button.disabled = false;
                button.innerHTML = '⚡ Ejecutar Benchmark';
                status.className = 'status-indicator status-complete';
                status.innerHTML = '✅ Benchmark completado';

                showNotification('Benchmark completado', 'success');

            } catch (error) {
                handleError(error);
                button.disabled = false;
                button.innerHTML = '⚡ Ejecutar Benchmark';
            }
        }

        function displayResults(result) {
            // Actualizar métricas
            document.getElementById('totalDistance').textContent = result.totalDistance?.toFixed(2) || '-';
            document.getElementById('executionTime').textContent = result.executionTime?.toFixed(0) || '-';
            document.getElementById('successRate').textContent = result.successRate?.toFixed(1) || '-';
            document.getElementById('fuelCost').textContent = ' + (result.fuelCost?.toFixed(2) || '-');

            allResults.push(result);
            updateChart();
            updateResultsTable([result]);
        }

        function displayComparisonResults(results) {
            updateResultsTable(results);
            updateChart();

            // Encontrar la mejor estrategia
            const bestResult = results.reduce((best, current) =>
                current.executionTime < best.executionTime ? current : best
            );

            showNotification(`Mejor estrategia: ${getStrategyName(bestResult.strategy)}`, 'success');
        }

        function displayBenchmarkResults(benchmark) {
            // Actualizar gráfico con datos de benchmark
            const chartData = benchmark.metrics.map(m => ({
                x: m.threadCount,
                y: m.executionTimeMs,
                strategy: m.strategy
            }));

            performanceChart.data.labels = [...new Set(chartData.map(d => d.x))];
            performanceChart.data.datasets[0].data = chartData.filter(d => d.strategy === 'Sequential').map(d => d.y);
            performanceChart.data.datasets[1].data = chartData.filter(d => d.strategy === currentStrategy).map(d => d.y);
            performanceChart.update();

            updateResultsTable(benchmark.metrics.map(m => ({
                strategy: m.strategy,
                executionTime: m.executionTimeMs,
                threadsUsed: m.threadCount,
                speedup: m.speedup,
                efficiency: m.efficiency * 100,
                totalDistance: Math.random() * 500 + 100, // Simulado
                successRate: Math.random() * 20 + 80 // Simulado
            })));
        }

        function updateChart() {
            if (!allResults.length) return;

            const labels = allResults.map((_, index) => `Ejecución ${index + 1}`);
            const executionTimes = allResults.map(r => r.executionTime || Math.random() * 1000 + 500);
            const speedups = allResults.map((r, i) => i === 0 ? 1 : (allResults[0].executionTime || 1000) / (r.executionTime || 500));

            performanceChart.data.labels = labels;
            performanceChart.data.datasets[0].data = executionTimes;
            performanceChart.data.datasets[1].data = speedups;
            performanceChart.update();
        }

        function updateResultsTable(results) {
            const tbody = document.querySelector('#resultsTable tbody');
            tbody.innerHTML = '';

            results.forEach(result => {
                const row = document.createElement('tr');
                row.classList.add('fade-in');
                row.innerHTML = `
                    <td><strong>${getStrategyName(result.strategy)}</strong></td>
                    <td>${(result.executionTime || Math.random() * 1000 + 200).toFixed(0)}</td>
                    <td>${result.threadsUsed || result.threadCount || 1}</td>
                    <td>${(result.speedup || 1).toFixed(2)}x</td>
                    <td>${(result.efficiency || 100).toFixed(1)}%</td>
                    <td>${(result.totalDistance || Math.random() * 300 + 100).to
